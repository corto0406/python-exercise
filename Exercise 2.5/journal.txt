Exercise 2.5: Django MVT Revisited

Learning Goals

- Add images to the model and display them on the frontend of your application
- Create complex views with access to the model
- Display records with views and templates

Frontend Inspirations:

https://github.com/sumin3/Recipe-Django-App

This one is pretty cool because it was built with Django and Bootstrap so it provides a nice idea of 
what something similar to what I’m building could look like. I think the UI is nicely done and has 
attractive colors.

https://github.com/philipp-meier/recipe-manager

Recipe Manager is yet another iteration of the recipe app built with Django in PyCharm, which is a 
pretty nice IDE for Python dev, and Bootstrap and CSS for responsiveness and UI. It’s a bit less 
dressed up than the first example but I kind of like that because it plays with minimalism, which is 
attractive to me in general.

Reflection Questions

- In your own words, explain Django static files and how Django handles them.

Static files are the creative backbone of a web app - style, scripts, and images used in the app for 
aesthetics. They sit a directory titled static, so Django can retrieve them via tag {% static %} in 
the template files. Routing is handled by Django, which is super cool. 

During the developmental phase, Django's internal server efficiently manages static files; however, 
as the application transitions to a production environment, it necessitates the deployment of robust 
web servers such as Nginx or Apache. More advanced solutions like Amazon S3 or a Content Delivery 
Network (CDN) can be leveraged to optimize static asset delivery.

Prior global deployment of a web app, Django mandates executing `collectstatic` command to consolidate 
all static assets into a single directory (’STATIC_ROOT’). The STATIC_URL setting assumes primary 
importance, servicing as the virtual address for static assets. Setting it ‘to /static/’ gives it 
agency to convert the asset into a fully formed URL, e.g., http://example.com/static/css/style.css.

- Look up the following two Django packages on Django’s official documentation and/or other trusted 
sources. Write a brief description of each.

| Package | Description |
| --- | --- |
| ListView | a class-based view for displaying lists of objects from a specified model. It streamlines 
the process by automatically handling the model, queryset, template, and context data. Pagination is 
supported out of the box. Configuration involves specifying the model, template, and optional context 
variable name. While versatile, explicit template design is still necessary for rendering the list of 
objects and pagination controls. Overall, ListView simplifies the presentation of database-backed 
lists in Django applications. |
| DetailView | a class-based view designed for displaying detailed views of a single object from a 
specified model. It simplifies the process by handling the model, queryset, template, and context 
data automatically. Configuration involves specifying the model, template, and optional context 
variable name. Similar to ListView, explicit template design is necessary for rendering the detailed 
view. DetailView streamlines the presentation of database-backed details in Django applications. |

- You’re now more than halfway through Achievement 2! Take a moment to reflect on your learning in 
the course so far. How is it going? What’s something you’re proud of so far? Is there something you’re 
struggling with? What do you need more practice with? You can use these notes to guide your next 
mentor call.

It’s going well overall. I haven’t had any show stopping bugs or difficulties with the code to be able 
to move forward; I’m definitely proud of that. Django is so far really nice to work with it makes the 
development process feel much less lightweight and somehow more intuitive than anything I’ve worked 
with so far, I’m really liking learning to build with it. The directory structures are easy to 
navigate also. I really like how Django acts like an out-of-box framework that takes out a lot of the 
tedious hard-coding.

I wouldn’t say there’s anything that I’m struggling with, per se; however, I do feel a need to spend 
more time studying different use cases and applications of the framework. I get the sense that it can 
be quite powerful in regards to web development, and it would be great to see the breadth of its 
applicable cases.